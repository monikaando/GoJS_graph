<script>

    function init() {
        var $ = go.GraphObject.make;
        myDiagram = $(go.Diagram, "myDiagramDiv",
            {
                "undoManager.isEnabled": true  // enable undo & redo
            });
        var nodeDataArray = [
            { key: "Apple", color: "red", loc: "0 0"},
            { key: "Banana", color: "yellow", loc: "200 0"},
            { key: "Orange", color: "orange", loc: "450 0"},
            { key: "Pear", color: "green", loc: "50 200"},
            { key: "Plum", color: "violet", loc: "400 150"},
        ];
        var linkDataArray = [
            { from: "Apple", to: "Banana", color: "turquoise" },
            { from: "Banana", to: "Orange", color: "turquoise" },
            { from: "Orange", to: "Plum", color: "turquoise" },
            { from: "Plum", to: "Pear", color: "turquoise" },
            { from: "Pear", to: "Apple", color: "turquoise" },
        ];
        myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);

        function changeFontSize(e, obj) {
            myDiagram.commit(function (d) {
                var nodedata = obj.part.data;
                var fontsize = "bold 12pt serif"; 
                var newfontsize = "bold 24pt serif";
                debugger
                if(nodedata, "font", fontsize){
                    d.model.set(nodedata, "font", newfontsize)
                }
                else {
                    d.model.set(nodedata, "font", fontsize)
                }
            }, "changed font size");                
            
        }
        function resetFontSize(e, obj) {
            myDiagram.commit(function (d) {
                var nodedata = obj.part.data;
                var fontsize = "bold 12pt serif"; 
                d.model.set(nodedata, "font", fontsize);
            }, "reset font size");   
        }

        myDiagram.nodeTemplate =
            $(go.Node, "Auto",
                new go.Binding("position", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                $(go.Shape, "Ellipse", { fill: "white", portId: "", fromLinkable: true, toLinkable: true },
                    new go.Binding("fill", "color")
                ),
                $(go.TextBlock, "text",  {margin: 15, font: "bold 12px Georgia, Serif"},
                    new go.Binding("text", "key"),
                    new go.Binding("font","font"),
                    {
                    contextMenu:
                        $("ContextMenu",
                            $("ContextMenuButton",
                                $(go.TextBlock, "Change the font size"),
                                { click: changeFontSize })
                        )
                }
                ),
                
            );
        myDiagram.linkTemplate =
            $(go.Link,
                {
                    routing: go.Link.AvoidsNodes,
                    corner: 10
                },
                {
                    reshapable: true, resegmentable: true,
                    relinkableFrom: true, relinkableTo: true,
                    adjusting: go.Link.Stretch
                },
                $(go.Shape, { strokeWidth: 2 },
                    new go.Binding("stroke", "color")
                ),
                $(go.Shape, { toArrow: "Standard", stroke: null },
                    new go.Binding("fill", "color")
                )
            );

        myDiagram.linkingTool =
            $(go.Link,
                $(go.Shape, { strokeWidth: 2 }),
                $(go.Shape, { toArrow: "OpenTriangle" }),
            )
    }
</script>

{{outlet}}